import json, sys
from pathlib import PurePath
from argparse import ArgumentParser

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('template_json', nargs=1, type=str, help='json file listing template classes and spectrum types')
    parser.add_argument('-o', dest='output_dir', nargs=1, type=str, help='Output directory')

    args = parser.parse_args()

    # use current directory if no output path was given
    output_dir = PurePath() if args.output_dir is None else PurePath(args.output_dir[0])

    def write_string(filepath, string):
        with open(filepath, 'w') as f:
            f.write(string)

    namespace = "namespace yart\n{{\n{}\n}}"

    header_body = ''
    source_body = ''

    template = json.loads(open(args.template_json[0], 'r').read())

    for template_class in template['templateClasses']:
        for spectrum in template['spectra']:
            header_body += '    extern template class {}<{}>;\n'.format(template_class, spectrum)
            source_body += '    template class {}<{}>;\n'.format(template_class, spectrum)

    header = '// Autogenerated code\n#pragma once\n' + namespace.format(header_body)
    source = '// Autogenerated code\n#include "yart.h"\n' + namespace.format(source_body)

    write_string(output_dir / 'templatebuild.cpp', source)
    write_string(output_dir / 'templatedeclaration.h', header)